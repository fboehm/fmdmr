---
title: "Wuttke Analysis"
format: gfm
bibliography: ../references.bib
---

Here, we analyze the traits from @wuttke_imputation-powered_2023.

We use the FMD summary statistics that are publicly available.

```{r}
library(magrittr)
```


```{r}
fmd_file <- here::here("analysis", "data", "fmd", "GCST90026612_buildGRCh37.tsv")
fmd <- vroom::vroom(fmd_file) %>%
    dplyr::mutate(chr_pos = paste0("chr", chromosome, ":", base_pair_location))
fmd_lead_snps_file <- here::here("analysis", "data", "fmd", "41467_2021_26174_MOESM4_ESM.xlsx") # snps from Katz et al. 2022 Supp Info Table SII.
fmd_lead_snps <- readxl::read_xlsx(fmd_lead_snps_file, skip = 1, col_names = TRUE) %>%
    dplyr::filter(`P-value` < 10^-6)

```


```{r}
# https://cran.r-project.org/web/packages/LDlinkR/vignettes/LDlinkR.html
# follow steps at above url to use LDlinkR to get LD matrix for use with MendelianRandomization R pkg
ld_token <- "3fbdb0673b22"
# make two snp ann objects, one for each build
ensembl_grch38 <- biomaRt::useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_ann_grch38 <- biomaRt::getBM(attributes = c("refsnp_id", "chr_name", "chrom_start", "chrom_end"),
                filters = "snp_filter",
                values = fmd_lead_snps$rsID,
                mart = ensembl_grch38) %>%
                    tibble::as_tibble() %>%
                    dplyr::rename(pos_grch38 = chrom_start) %>%
                    dplyr::select(-chrom_end)
ensembl_grch37 <- biomaRt::useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp", GRCh = 37)
snp_ann_grch37 <- biomaRt::getBM(attributes = c("refsnp_id", "chr_name", "chrom_start", "chrom_end"),
                filters = "snp_filter",
                values = fmd_lead_snps$rsID,
                mart = ensembl_grch37) %>%
                    tibble::as_tibble() %>%
                    dplyr::rename(pos_grch37 = chrom_start) %>%
                    dplyr::select(-chrom_end)
snp_ann_pre <- snp_ann_grch38 %>%
    dplyr::mutate(chr_name = as.integer(chr_name)) %>%
    dplyr::filter(!is.na(chr_name)) %>%
    dplyr::left_join(snp_ann_grch37, by = c("refsnp_id", "chr_name"))
snp_ann <- snp_ann_pre %>%
    dplyr::mutate(chr = as.integer(chr_name)) %>%
    dplyr::select( - chr_name) %>%
    dplyr::arrange(chr, pos_grch37)

snp_ann %>%
    print(n = nrow(.))   
# which fmd_lead_snps are not in fmd object?
big_snp_ann <- snp_ann %>%
    dplyr::mutate(chr_pos37 = paste0("chr", chr, ":", pos_grch37)) %>%
    dplyr::left_join(fmd, by = c("chr_pos37" = "chr_pos")) %>%
    dplyr::select(- chromosome, - base_pair_location, - Het_P, - N_cases, - N_ctrls) %>%
    dplyr::mutate(chr_pos38 = paste0("chr", chr, ":", pos_grch38)) 

# subset snp_ann to include only SNPs that are in fmd (ie, publicly available data)
good_snps <- big_snp_ann %>%
    dplyr::filter(!is.na(chromosome)) 
bad_snps <- big_snp_ann %>%
    dplyr::filter(is.na(chromosome))


```


```{r}
ld_snps_37 <- fmdmr::get_correlated_snps(fmd_lead_snps$rsID, 
                                        genome_build = "grch37", 
                                        ld_token = ld_token)
ld_snps_38 <- fmdmr::get_correlated_snps(fmd_lead_snps$rsID, 
                                        genome_build = "grch38", 
                                        ld_token = ld_token)

ld_snps_37 %>%
    dplyr::group_by(lead_snp) %>%
    dplyr::count()
ld_snps_37 %>%
    dplyr::group_by(lead_snp) %>%
    dplyr::arrange(desc(R2), abs(Distance)) %>%
    dplyr::filter(R2 == max(R2)) %>%
    dplyr::rename(Coord_grch37 = Coord)



files <- list.files(here::here("analysis", "data", "wuttke2023"), pattern = "tsv.gz", full.names = TRUE)
for (file in files){
    cat(file)
    dat <- vroom::vroom(file) %>%
        dplyr::mutate(chr_pos = paste0("chr", chrom, ":", pos))
    # check if lead snps are in dat
    dat_lead_snps <- dat %>%
        dplyr::filter(rsids %in% fmd_lead_snps$rsID)    
    nrow(dat_lead_snps)
    # Does each lead SNP have a proxy in dat?
    proxy <- list()
    for (row in 1:nrow(fmd_lead_snps)){
        one_lead <- fmd_lead_snps[row, ]
        d_one <- ld_snps_38 %>%
            dplyr::filter(lead_snp == one_lead$rsID) %>%
            dplyr::relocate(lead_snp) %>%
            dplyr::rename_with(.f = function(x){paste0(x, "_grch38")}, .cols = -lead_snp )

        proxy[[one_lead$rsID]] <- d_one
    }
    proxies <- proxy %>%
        dplyr::bind_rows() %>%
        dplyr::group_by(lead_snp) %>%
        dplyr::inner_join(dat, by = c("RS_Number_grch38" = "rsids")) %>%
        dplyr::arrange(desc(R2_grch38), abs(Distance_grch38)) %>%
        dplyr::slice(1) %>%
        dplyr::mutate(corr_allele_tib = purrr::map(.x = Correlated_Alleles_grch38, .f = fmdmr::parse_correlated_alleles))
    proxies %>%
        dplyr::inner_join(big_snp_ann, by = c("lead_snp" = "refsnp_id")) %>%
        dplyr::inner_join(dat, by = c("chr_pos38" = "chr_pos"))
```

1. for a lead SNP (ie, FMD-associated SNP), get nearby SNPs in FMD data, paying attention to genome build (GRCh37)
2. for a lead SNP, get nearby SNPs in Wuttke data, paying attention to genome build (GRCh38)
3. query LDlinkR for LD matrix for union of SNPs from 1 and 2 (along with lead SNP)
4. 




```{r}
sessioninfo::session_info()
```