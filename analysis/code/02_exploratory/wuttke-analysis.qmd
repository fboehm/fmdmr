---
title: "Wuttke Analysis"
format: gfm
bibliography: ../references.bib
---

Here, we analyze the traits from @wuttke_imputation-powered_2023.

We use the FMD summary statistics that are publicly available.

```{r}
library(magrittr)
```


```{r}
fmd_file <- here::here("analysis", "data", "fmd", "GCST90026612_buildGRCh37.tsv")
fmd <- vroom::vroom(fmd_file) %>%
    dplyr::mutate(chr_pos = paste0("chr", chromosome, ":", base_pair_location))
fmd_lead_snps_file <- here::here("analysis", "data", "fmd", "katz_fmd_snps.csv") # snps from Katz et al. 2022 Supp Info Table SII.
fmd_lead_snps <- read.csv(fmd_lead_snps_file, stringsAsFactors = FALSE, header = FALSE) %>% as.character()

```


```{r}
# https://cran.r-project.org/web/packages/LDlinkR/vignettes/LDlinkR.html
# follow steps at above url to use LDlinkR to get LD matrix for use with MendelianRandomization R pkg
ld_token <- "3fbdb0673b22"
# make two snp ann objects, one for each build
ensembl_grch38 <- biomaRt::useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_ann_grch38 <- biomaRt::getBM(attributes = c("refsnp_id", "chr_name", "chrom_start", "chrom_end"),
                filters = "snp_filter",
                values = fmd_lead_snps,
                mart = ensembl_grch38) %>%
                    tibble::as_tibble() %>%
                    dplyr::rename(pos_grch38 = chrom_start) %>%
                    dplyr::select(-chrom_end)
ensembl_grch37 <- biomaRt::useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp", GRCh = 37)
snp_ann_grch37 <- biomaRt::getBM(attributes = c("refsnp_id", "chr_name", "chrom_start", "chrom_end"),
                filters = "snp_filter",
                values = fmd_lead_snps,
                mart = ensembl_grch37) %>%
                    tibble::as_tibble() %>%
                    dplyr::rename(pos_grch37 = chrom_start) %>%
                    dplyr::select(-chrom_end)
snp_ann_pre <- snp_ann_grch38 %>%
    dplyr::left_join(snp_ann_grch37, by = c("refsnp_id", "chr_name"))
snp_ann <- snp_ann_pre %>%
    dplyr::filter(!is.na(as.integer(chr_name))) %>%
    dplyr::mutate(chr = as.integer(chr_name)) %>%
    dplyr::select( - chr_name) %>%
    dplyr::arrange(chr, pos_grch37)

snp_ann %>%
    print(n = nrow(.))   
# which fmd_lead_snps are not in fmd object?
big_snp_ann <- snp_ann %>%
    dplyr::mutate(chr_pos = paste0("chr", chr, ":", pos_grch37)) %>%
    dplyr::left_join(fmd, by = c("chr_pos"))
# subset snp_ann to include only SNPs that are in fmd (ie, publicly available data)
good_snps <- big_snp_ann %>%
    dplyr::filter(!is.na(chromosome)) 
bad_snps <- big_snp_ann %>%
    dplyr::filter(is.na(chromosome))
```


```{r}
ld_snps_f <- fmdmr::get_correlated_snps(fmd_lead_snps, genome_build = "grch37", ld_token = ld_token)
files <- list.files(here::here("data", "wuttke2023"), pattern = "tsv.gz", full.names = TRUE)
for (file in files){
    cat(file)
    dat <- vroom::vroom(file) %>%
        dplyr::mutate(chr_pos = paste0("chr", chrom, ":", pos))
    proxy_tib_d <- ld_s        
        dplyr::mutate(lead_snp = proxy_tib$lead_snp)
        dplyr::mutate(lead_snp = proxy_tib$lead_snp)
    nps_d %>%
        dplyr::mutate(in_dat_rs = RS_Number %in% dat$rsids) %>%
        dplyr::mutate(in_dat_chr_pos = Coord %in% dat$chr_pos) %>%
        dplyr::relocate(lead_snp, in_dat_rs, in_dat_chr_pos, R2) %>%  
        dplyr::filter(in_dat_rs | in_dat_chr_pos) %>%
        dplyr::group_by(lead_snp) %>%
        dplyr::arrange(desc(R2)) %>%
        #dplyr::filter(R2 == max(R2)) %>%
        dplyr::rename(proxy_in_dat = RS_Number) 
    # same for fmd snps
    proxy_tib_f_pre <- ld_snps_f %>%
        dplyr::mutate(in_fmd_rs = RS_Number %in% fmd$SNP) %>%
        dplyr::mutate(in_fmd_chr_pos = Coord %in% fmd$chr_pos) %>%
        dplyr::relocate(lead_snp, in_fmd_rs, in_fmd_chr_pos, R2) %>%
        dplyr::filter(in_fmd_rs | in_fmd_chr_pos) %>%
        dplyr::group_by(lead_snp) 
    proxy_tib_f <- proxy_tib_f_pre %>%
        #dplyr::filter(R2 == max(R2)) %>%
        dplyr::rename(proxy_in_fmd = RS_Number) %>%
        dplyr::mutate(is_proxy_in_fmd_also_in_dat_rs = proxy_in_fmd %in% dat$rsids) %>%
        dplyr::relocate(is_proxy_in_fmd_also_in_dat_rs)
    # filter fmd to get effects for the lead SNPs
    fmd_small <- fmd %>%
        dplyr::filter(SNP %in% proxy_tib_f$lead_snp, p_value < 10 ^ -6)
    ptf2 <- proxy_tib_f %>%
        dplyr::filter(lead_snp %in% fmd_small$SNP) 
    ptd2 <- proxy_tib_d %>%
        dplyr::filter(lead_snp %in% fmd_small$SNP)
```

1. for a lead SNP (ie, FMD-associated SNP), get nearby SNPs in FMD data, paying attention to genome build (GRCh37)
2. for a lead SNP, get nearby SNPs in Wuttke data, paying attention to genome build (GRCh38)
3. query LDlinkR for LD matrix for union of SNPs from 1 and 2 (along with lead SNP)
4. 




```{r}
devtools::session_info()
```