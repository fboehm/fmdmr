---
title: "Exploring the creatinine GWAS summary statistics & FMD GWAS meta-analysis summary statistics"
format: gfm
---

We want to "explore" the two results files to see how many SNPs are available in each, and to see 
how many SNPs are in both files. This information will inform 2-sample MR studies to 
assess the causal effect of FMD on creatinine levels.

First, we read into R the creatinine summary statistics file.

```{r, eval = FALSE}
cre_file <- here::here("ukb_gwas", "biomarkers-30700-both_sexes-irnt.tsv.bgz")
cre_tib <- vroom::vroom(cre_file)
```

```{r}
fmd_file <- here::here("data", "fmd_meta_gwas", 
                        "meta_analyse_FMD_FUMA_FR_MAYO_DEFINE_POL_MGI_FEIRI_HRC_all_2020-08-12.tab")
fmd_tib <- vroom::vroom(fmd_file)
```

It looks like the way to identify (and, ultimately, match) markers in the two studies involves
using the four columns in the Creatinine results file:

"chr"                            
"pos"                           
"ref"                            
"alt"   

Note that the Neale Lab seems to not list an rs identifier for the markers.
I need to pay attention to the genomic build that is used in both the Neale Lab 
analysis and in the FMD meta-analysis. Hopefully the two studies use the 
same genomic build, but, if not, I'll need to account for that in the 
"pos" values.

`fmd_tib`, on the other hand, has the summary statistics in a different format.
It has 12 columns in total:

"MarkerName" 
"rsID"       
"CHROM"      
"POS"        
"REF"       
"ALT"        
"P"          
"BETA"       
"SE"         
"N"         
"Rsq_min"    
"Rsq_max"   

Let's look at only Chr1 for now, just for an example.

```{r}
library(magrittr)

```

We see that there are 495,323 markers on Chr1 that are in both data sets.

How many Chr 1 SNPs are in the FMD meta-analysis?

```{r}
fmd_tib %>%
    dplyr::filter(CHROM == 1) %>%
    dim()
```

There are 495,398 SNPs on Chr1 in the FMD file. Thus only 75 FMD file Chr 1 SNPs are not in 
the Neale Lab data. It seems most likely that the two files are using the same genomic build. 
It's hard to think that there would be such a high overlap rate if they used different builds.
However, I still need to look at the documentation - ie, the FMD paper - to be sure about this.

## Stanzick et al. 2021 data

```{r, eval = FALSE}
stanzick_file <- here::here("stanzick2021", "metal_eGFR_meta_ea1.TBL.map.annot.gc.gz")
stanzick_tib <- vroom::vroom(stanzick_file)
```

```{r, eval = FALSE}
#kettunen_file <- here::here("kettunen2016", "harmonised", "GCST90132719.tsv.gz")
kettunen_file <- here::here("kettunen2016", "GCST90132719_buildGRCh37.txt.gz")
kettunen_tib <- vroom::vroom(kettunen_file)
```

```{r, eval = FALSE}
# find shared snps
#shared_snps <- intersect(fmd_tib$rsID, kettunen_tib$hm_rsid)
shared_snps <- intersect(fmd_tib$rsID, kettunen_tib$ID)
# length(shared_snps) 
# there are 6.4 million shared snps!
fmd_small <- fmd_tib %>%
    dplyr::filter(rsID %in% shared_snps) %>%
    dplyr::filter(P < 1e-6) # choose pvalue threshold
kettunen_small <- kettunen_tib %>%
    #dplyr::filter(hm_rsid %in% fmd_small$rsID)
    dplyr::filter(ID %in% fmd_small$rsID)
```

```{r, eval = FALSE}
# check that effect allele is the same between the two tibbles
kettunen_small %>%
    dplyr::inner_join(fmd_small, by = c("ID" = "rsID")) %>% 
    dplyr::mutate(harmonised = EA == ALT) %>%
    dplyr::select(harmonised) %>% unlist() %>% all()
```



```{r}
# https://cran.r-project.org/web/packages/LDlinkR/vignettes/LDlinkR.html
# follow steps at above url to use LDlinkR to get LD matrix for use with MendelianRandomization R pkg
ld_token <- "3fbdb0673b22"


remove_offdiagonal_ones <- function(symm_matrix, threshold = 0.9){
    nr <- nrow(symm_matrix)
    bad_list <- list()
    for (row in 1:nr){
        foo <- upper.tri(symm_matrix, diag = FALSE)[row,]
        bar <- symm_matrix[row, ] > threshold
        bad_list[[row]] <- which(foo & bar)
    }
    bad_indices <- unique(do.call("c", bad_list))
    if (length(bad_indices) == 0){
        return(symm_matrix)
    } else {
        out <- as.matrix(symm_matrix[- bad_indices, - bad_indices])
        rownames(out) <- colnames(out) <- colnames(symm_matrix)[- bad_indices]
        return(out)
    }
}
```


```{r, eval = FALSE}
ld_list <- list()
for (chr in 1:22){
    fmd_onechr <- fmd_small %>%
        dplyr::filter(CHROM == chr)
    if (nrow(fmd_onechr) > 1){
        foo <- LDlinkR::LDmatrix(fmd_onechr$rsID, 
                pop = "CEU", 
                r2d = "r2", 
                genome_build = "grch37",
                token = ld_token, 
                file = FALSE
                ) 
        
        bar <- foo %>% 
                    dplyr::select(-1) %>%
                    as.matrix() %>%
                    remove_offdiagonal_ones()

        # remove rows & cols for highly correlated SNPs 
        # (ie, LD > 0.95)

        ld_list[[chr]] <- bar
    }
    if (nrow(fmd_onechr) == 1){
        ld_list[[chr]] <- as.matrix(1)
        colnames(ld_list[[chr]]) <- fmd_onechr$rsID       
    }
    if (nrow(fmd_onechr) == 0){
        ld_list[[chr]] <- NA
    }
}
# remove NAs
ld_list_nona <- ld_list[!is.na(ld_list)]
ld_mat <- as.matrix(Matrix::bdiag(ld_list_nona))
rn <- do.call(c, lapply(ld_list_nona, colnames))
rownames(ld_mat) <- rn
colnames(ld_mat) <- rn
```

```{r, eval = FALSE}
input <- MendelianRandomization::mr_input(
            bx = fmd_small$BETA[fmd_small$rsID %in% colnames(ld_mat)], 
            bxse = fmd_small$SE[fmd_small$rsID %in% colnames(ld_mat)], 
            #by = kettunen_small$beta[kettunen_small$hm_rsid %in% colnames(ld_mat)], 
            by = kettunen_small$beta[kettunen_small$ID %in% colnames(ld_mat)], 
            #byse = kettunen_small$standard_error[kettunen_small$hm_rsid %in% colnames(ld_mat)], 
            byse = kettunen_small$se[kettunen_small$ID %in% colnames(ld_mat)], 
            corr = ld_mat,
            exposure = "FMD",
            outcome = "creatinine",
            snps = rownames(ld_mat)
        )
```

```{r, eval = FALSE}
MendelianRandomization::mr_ivw(input)
```

```{r, eval = FALSE}
MendelianRandomization::mr_plot(input)
```

### Barton Cystatin C


```{r}
barton_file <- here::here("data", "barton2021_cystatinC", "GCST90025945_buildGRCh37.tsv")
barton_tib <- vroom::vroom(barton_file)
```

```{r}
# find shared snps
small_dat <- fmd_tib %>%
     dplyr::inner_join(barton_tib, by = c("CHROM" = "chromosome", "POS" = "base_pair_location")) %>%
     dplyr::filter(P < 1e-8)  # choose pvalue threshold     

# harmonised? 
small_dat %>%
    dplyr::filter(REF == ALLELE0) # same 7 rows
```

```{r}
ld_list <- list()
for (chr in 1:22){
    fmd_onechr <- small_dat %>%
        dplyr::filter(CHROM == chr)
    if (nrow(fmd_onechr) > 1){
        foo <- LDlinkR::LDmatrix(fmd_onechr$rsID, 
                pop = "CEU", 
                r2d = "r2", 
                genome_build = "grch37",
                token = ld_token, 
                file = FALSE
                ) 
        
        bar <- foo %>% 
                    dplyr::select(-1) %>%
                    as.matrix() %>%
                    remove_offdiagonal_ones(threshold = 0.99)

        # remove rows & cols for highly correlated SNPs 

        ld_list[[chr]] <- bar
    }
    if (nrow(fmd_onechr) == 1){
        ld_list[[chr]] <- as.matrix(1)
        colnames(ld_list[[chr]]) <- fmd_onechr$rsID       
    }
    if (nrow(fmd_onechr) == 0){
        ld_list[[chr]] <- NA
    }
}
# remove NAs
ld_list_nona <- ld_list[!is.na(ld_list)]
ld_mat <- as.matrix(Matrix::bdiag(ld_list_nona))
rn <- do.call(c, lapply(ld_list_nona, colnames))
rownames(ld_mat) <- rn
colnames(ld_mat) <- rn
```

```{r}
small_dat_no_ld <- small_dat %>%
    dplyr::filter(rsID %in% rownames(ld_mat))
```

```{r}
input <- MendelianRandomization::mr_input(
            bx = small_dat_no_ld$BETA, 
            bxse = small_dat_no_ld$SE, 
            by = small_dat_no_ld$beta, 
            byse = small_dat_no_ld$standard_error,
            corr = ld_mat,
            exposure = "FMD",
            outcome = "cystatin C",
            snps = rownames(ld_mat)
        )
```

```{r}
MendelianRandomization::mr_allmethods(input)
MendelianRandomization::mr_egger(input, correl = ld_mat)

```

```{r}
MendelianRandomization::mr_plot(input, interactive = FALSE, line = "ivw", labels = TRUE, orientate = TRUE)
MendelianRandomization::mr_plot(input, interactive = FALSE, line = "egger", labels = TRUE, orientate = TRUE)
MendelianRandomization::mr_plot(MendelianRandomization::mr_allmethods(input, method = "all"), 
                                interactive = FALSE, 
                                labels = TRUE, orientate = TRUE)
```

```{r}
MendelianRandomization::mr_funnel(input)
```


## Barton Creatinine analysis

```{r}
barton_file <- here::here("data", "barton2021_creatinine", "GCST90025946_buildGRCh37.tsv")
barton_tib <- vroom::vroom(barton_file)
```

```{r}
# find shared snps
small_dat <- fmd_tib %>%
     dplyr::inner_join(barton_tib, by = c("CHROM" = "chromosome", "POS" = "base_pair_location")) %>%
     dplyr::filter(P < 1e-8) # choose pvalue threshold     
# harmonised? 
small_dat %>%
    dplyr::filter(REF == ALLELE0) 
```

```{r}
ld_list <- list()
for (chr in 1:22){
    fmd_onechr <- small_dat %>%
        dplyr::filter(CHROM == chr)
    if (nrow(fmd_onechr) > 1){
        foo <- LDlinkR::LDmatrix(fmd_onechr$rsID, 
                pop = "CEU", 
                r2d = "r2", 
                genome_build = "grch37",
                token = ld_token, 
                file = FALSE
                ) 
        
        bar <- foo %>% 
                    dplyr::select(-1) %>%
                    as.matrix() %>%
                    remove_offdiagonal_ones(threshold = 0.99)

        # remove rows & cols for highly correlated SNPs 

        ld_list[[chr]] <- bar
    }
    if (nrow(fmd_onechr) == 1){
        ld_list[[chr]] <- as.matrix(1)
        colnames(ld_list[[chr]]) <- fmd_onechr$rsID       
    }
    if (nrow(fmd_onechr) == 0){
        ld_list[[chr]] <- NA
    }
}
# remove NAs
ld_list_nona <- ld_list[!is.na(ld_list)]
ld_mat <- as.matrix(Matrix::bdiag(ld_list_nona))
rn <- do.call(c, lapply(ld_list_nona, colnames))
rownames(ld_mat) <- rn
colnames(ld_mat) <- rn
```

```{r}
small_dat_no_ld <- small_dat %>%
    dplyr::filter(rsID %in% rownames(ld_mat))
```

```{r}
input <- MendelianRandomization::mr_input(
            bx = small_dat_no_ld$BETA, 
            bxse = small_dat_no_ld$SE, 
            by = small_dat_no_ld$beta, 
            byse = small_dat_no_ld$standard_error,
            corr = ld_mat,
            exposure = "FMD",
            outcome = "Creatinine",
            snps = rownames(ld_mat)
        )
```


```{r}
MendelianRandomization::mr_plot(input, interactive = FALSE, line = "ivw", labels = TRUE, orientate = TRUE)
MendelianRandomization::mr_plot(input, interactive = FALSE, line = "egger", labels = TRUE, orientate = TRUE)
MendelianRandomization::mr_plot(MendelianRandomization::mr_allmethods(input, method = "all"), 
                                interactive = FALSE, 
                                labels = TRUE, orientate = TRUE)
```


```{r}
MendelianRandomization::mr_funnel(input)
```