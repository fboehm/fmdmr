---
title: "Barton et al. GWAS summary statistics & FMD GWAS meta-analysis summary statistics"
author: "Fred Boehm"
toc: true
number-sections: true
format: 
    html:
        code-fold: true
        embed-resources: true
    gfm: default
---

We want to "explore" the two results files to see how many SNPs are available in each, and to see 
how many SNPs are in both files. This information will inform 2-sample MR studies to 
assess the causal effect of FMD on creatinine levels.

First, we read into R the FMD summary statistics file.


```{r}
fmd_file <- here::here("data", "fmd", "GCST90026612_buildGRCh37.tsv")
fmd_tib <- vroom::vroom(fmd_file)
```



```{r}
library(magrittr)
```


```{r}
# https://cran.r-project.org/web/packages/LDlinkR/vignettes/LDlinkR.html
# follow steps at above url to use LDlinkR to get LD matrix for use with MendelianRandomization R pkg
ld_token <- "3fbdb0673b22"
barton_sample_size <- 437660 # https://www.ebi.ac.uk/gwas/efotraits/EFO_0004518 - see Barton et al. 2021
# define function
remove_offdiagonal_ones <- function(symm_matrix, threshold = 0.9){
    nr <- nrow(symm_matrix)
    bad_list <- list()
    for (row in 1:nr){
        foo <- upper.tri(symm_matrix, diag = FALSE)[row,]
        bar <- symm_matrix[row, ] > threshold
        bad_list[[row]] <- which(foo & bar)
    }
    bad_indices <- unique(do.call("c", bad_list))
    if (length(bad_indices) == 0){
        return(symm_matrix)
    } else {
        out <- as.matrix(symm_matrix[- bad_indices, - bad_indices])
        rownames(out) <- colnames(out) <- colnames(symm_matrix)[- bad_indices]
        return(out)
    }
}
```




```{r, results = "asis"}
outcomes <- c("CystatinC", "Creatinine")
p_thresholds <- c(1e-06, 1e-07, 1e-08)
ld_file <- here::here("data", "fmd", "ld_matrix.rds")
for (outcome in outcomes){
    for (p_threshold in p_thresholds){
        if (outcome == "CystatinC"){
            barton_file <- here::here("data", "barton2021_cystatinC", "GCST90025945_buildGRCh37.tsv")
        }
        if (outcome == "Creatinine"){
            barton_file <- here::here("data", "barton2021_creatinine", "GCST90025946_buildGRCh37.tsv")
        }
        barton_tib <- vroom::vroom(barton_file)
        # find shared snps
        small_dat_pre <- fmd_tib %>%
            dplyr::filter(p_value < p_threshold)  %>% # choose pvalue threshold     
            dplyr::inner_join(barton_tib, by = c("chromosome", "base_pair_location"))
        # harmonised? 
        small_dat <- small_dat_pre %>%
            dplyr::mutate(harmonised = OA == ALLELE0)
        (all.equal(small_dat$harmonised, rep(TRUE, length(small_dat$harmonised))))
        # make ld matrix if ld_file doesn't exist
        if (file.exists(ld_file)){
            ld_mat <- readRDS(ld_file)
        } else {
            ld_list <- list()
            pt <- min(p_thresholds)
            for (chr in 1:22){
                fmd_onechr <- small_dat %>%
                    dplyr::filter(chromosome == chr)
                if (nrow(fmd_onechr) > 1){
                    foo <- LDlinkR::LDmatrix(fmd_onechr$SNP, 
                            pop = "CEU", 
                            r2d = "r2", 
                            genome_build = "grch37",
                            token = ld_token, 
                            file = FALSE
                            ) 
                    
                    bar <- foo %>% 
                                dplyr::select(-1) %>%
                                as.matrix() %>%
                                remove_offdiagonal_ones(threshold = 0.99)

                    # remove rows & cols for highly correlated SNPs 

                    ld_list[[chr]] <- bar
                }
                if (nrow(fmd_onechr) == 1){
                    ld_list[[chr]] <- as.matrix(1)
                    colnames(ld_list[[chr]]) <- fmd_onechr$SNP      
                }
                if (nrow(fmd_onechr) == 0){
                    ld_list[[chr]] <- NA
                }
            }
            # remove NAs
            ld_list_nona <- ld_list[!is.na(ld_list)]
            ld_mat <- as.matrix(Matrix::bdiag(ld_list_nona))
            rn <- do.call(c, lapply(ld_list_nona, colnames))
            rownames(ld_mat) <- rn
            colnames(ld_mat) <- rn
            # save ld matrix
            saveRDS(ld_mat, ld_file)
        }

        # filter to remove highly correlated SNPs
        small_dat_no_ld <- small_dat %>%
            dplyr::filter(SNP %in% rownames(ld_mat))
        ld_mat_small <- ld_mat[rownames(ld_mat) %in% small_dat_no_ld$SNP, 
                               colnames(ld_mat) %in% small_dat_no_ld$SNP]
        print(nrow(small_dat_no_ld))
        # make input object
        input <- MendelianRandomization::mr_input(
                    bx = small_dat_no_ld$BETA, 
                    bxse = small_dat_no_ld$SE, 
                    by = small_dat_no_ld$beta, 
                    byse = small_dat_no_ld$standard_error,
                    corr = ld_mat_small,
                    exposure = "FMD",
                    outcome = outcome,
                    snps = rownames(ld_mat_small)
                )
        # make header for collection of graphs for each iteration of loop
        cat('\n\n## `', outcome, "with p-value threshold: ", p_threshold, '`\n\n')    
        # MR analyses   
        result <- MendelianRandomization::mr_allmethods(input)
        result@Values %>% 
            dplyr::mutate_if(is.numeric, signif, digits = 2) %>%
            dplyr::mutate("Number of SNPs" = length(result@Data@snps)) %>%
            dplyr::rename("95% CI lower" = 4, "95% CI upper" = 5) %>%
            knitr::kable() %>%
            print()
        ivw_res <- MendelianRandomization::mr_ivw(input, correl = TRUE)
        egger_res <- MendelianRandomization::mr_egger(input, correl = TRUE)

        # MR plots
        MendelianRandomization::mr_plot(input, interactive = FALSE, line = "ivw", labels = TRUE, orientate = TRUE) %>%
            print()
        MendelianRandomization::mr_plot(input, interactive = FALSE, line = "egger", labels = TRUE, orientate = TRUE) %>%
            print()
        ## MR.SPI
       res_mrspi <- MR.SPI::MR.SPI(gamma = small_dat_no_ld$BETA, #FMD beta. lowercase gamma is the exposure
                        se_gamma = small_dat_no_ld$SE, #FMD se
                        Gamma = small_dat_no_ld$beta, #outcome beta
                        se_Gamma = small_dat_no_ld$standard_error, #outcome se
                        n1 = small_dat_no_ld$N_cases[1] + small_dat_no_ld$N_ctrls[1],# FMD sample size
                        n2 = barton_sample_size, #outcome sample size
                        unif = TRUE
        ) 
        res_mrspi %>%
            print()
        if (nrow(small_dat_no_ld) >= 10){
            ## devtools::install_github("xiaoran-liang/MRAHC")
            res_mrahc_a <- MRAHC::MR_AHC(betaX = small_dat_no_ld$BETA, 
                                        seX = small_dat_no_ld$SE,
                                        betaY = small_dat_no_ld$beta,
                                        seY = small_dat_no_ld$standard_error,
                                        n = barton_sample_size,
                                        smallcluster = 4,
                                        outremove = FALSE)
            res_mrahc_b <- MRAHC::MR_AHC(betaX = small_dat_no_ld$BETA, 
                                        seX = small_dat_no_ld$SE,
                                        betaY = small_dat_no_ld$beta,
                                        seY = small_dat_no_ld$standard_error,
                                        n = barton_sample_size,
                                        smallcluster = 3,
                                        outremove = FALSE)
            res_mrahc_c <- MRAHC::MR_AHC(betaX = small_dat_no_ld$BETA, 
                                        seX = small_dat_no_ld$SE,
                                        betaY = small_dat_no_ld$beta,
                                        seY = small_dat_no_ld$standard_error,
                                        n = barton_sample_size,
                                        smallcluster = 4,
                                        outremove = TRUE)
            res_mrahc_d <- MRAHC::MR_AHC(betaX = small_dat_no_ld$BETA, 
                                        seX = small_dat_no_ld$SE,
                                        betaY = small_dat_no_ld$beta,
                                        seY = small_dat_no_ld$standard_error,
                                        n = barton_sample_size,
                                        smallcluster = 3,
                                        outremove = TRUE)
            res_mrahc_e <- MRAHC::MR_AHC(betaX = small_dat_no_ld$BETA, 
                                        seX = small_dat_no_ld$SE,
                                        betaY = small_dat_no_ld$beta,
                                        seY = small_dat_no_ld$standard_error,
                                        n = barton_sample_size,
                                        smallcluster = 4,
                                        outremove = TRUE, 
                                        iter = TRUE)
            res_mrahc_f <- MRAHC::MR_AHC(betaX = small_dat_no_ld$BETA, 
                                        seX = small_dat_no_ld$SE,
                                        betaY = small_dat_no_ld$beta,
                                        seY = small_dat_no_ld$standard_error,
                                        n = barton_sample_size,
                                        smallcluster = 3,
                                        outremove = TRUE,
                                        iter = TRUE)
        
                                    # NOTE FROM MRAHC PACKAGE DOCUMENTATION: #'In a two-sample MR design, we recommend using the sample size of the outcome sample.
            res_mrahc_a %>%
                print()
            res_mrahc_b %>%
                print()
            res_mrahc_c %>%
                print()
            res_mrahc_d %>%
                print()
            res_mrahc_e %>%
                print()
            res_mrahc_f %>%
                print()
        }
    }
}
```

```{r}
devtools::session_info()
```

